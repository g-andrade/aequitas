@title aequitas
@doc

<a target="_parent" href="https://hex.pm/packages/aequitas" alt="Hex.pm Package">
    <img src="https://img.shields.io/hexpm/v/aequitas.svg?style=flat"/></a>
<a target="_parent" href="https://travis-ci.org/g-andrade/aequitas" alt="Build Status">
    <img src="https://travis-ci.org/g-andrade/aequitas.png?branch=master"/></a>

== aequitas - Fairness Regulator  ==

`aequitas' is a library for Erlang/OTP and Elixir that allows you to fairly
distribute system capacity to different identifiers within a group.

=== Example ===

Let's say we've got a web server handling HTTP requests. We want to ensure
misbehaving IP addresses don't steal (too much) system capacity from benevolent clients.

As such, before we handle each HTTP request we ask `aequitas' whether
an IP address can be granted work based on the statistical distribution
of recent work allocations.

We'll name our group `http_requests' (any atom will do.)

<pre lang="erlang" class="erlang">
<![CDATA[case aequitas:ask(http_requests, IPAddress) of
    accepted ->
        Reply = handle_request(...),
        {200, Reply};
    rejected ->
        % too many requests!
        {429, <<>>}
end.]]>
</pre>

=== Event Tracking ===

A group keeps track of how many work units were attributed to each identifier
within the last `N' events; the size of the event window, `N', is determined by
constraints derived from from the group  settings:

<ul>
<li>`max_window_size': Enforces a ceiling on how many events we're allowed to track (defaults to 10000)</li>
<li>`max_window_duration': Enforces a maximum age for events (defaults to 5000ms)</li>
</ul>

Whichever of these limits is reached first will trigger a drop of old events until it is no longer so.

=== Rationale ===

Both the mean and the standard deviation of work share, per identifier - for events within
the event window - are calculated in a rolling fashion.

Based on these statistical measures, whenever there's a new request for work execution
we calculate what would the
<a target="_parent" href="https://en.wikipedia.org/wiki/Standard_score">z-score</a> of
the identifier become if the work were allowed to go through. The z-score, or standard score, is
the signed number of standard deviations above the mean.

Assuming that work distribution among identifiers approximates the
<a target="_parent" href="https://en.wikipedia.org/wiki/Normal_distribution">normal distribution</a>,
we can apply the
<a target="_parent" href="https://en.wikipedia.org/wiki/68%E2%80%9395%E2%80%9399.7_rule">68–95–99.7 rule</a>
when there's enough samples.

Taking the above into account, we can reject the `~2.275%' higher quantile (`(100 - 95.45) / 2') of
work requests - the outliers that are eating up most work - by rejecting work requests whose
identifiers would end up with a z-score higher than `2'. That is: identifiers whose
work share would be placed more than two standard deviations from the work share mean.

=== Custom Rejection Threshold ===

The default work rejection threshold - how many standard deviations above the mean
is the work share of an identifier allowed to be - is `2'.

This can be customized by specifying the `max_zscore' option when asking permission
to execute. It can be any number or the atom 'infinity'.

Picking the web server example above, if we wanted to be stricter
about upper quantile outliers, we could lower `max_zscore' to `1' - which
would cause rejection of the top '~16%' of work share culprits.

<pre lang="erlang" class="erlang">
<![CDATA[case aequitas:ask(http_requests, IPAddress, [{max_zscore, 1}]) of
    accepted ->
        Reply = handle_request(...),
        {200, Reply};
    rejected ->
        % too many requests!
        {429, <<>>}
end.]]>
</pre>

=== Work Weight ===

Work can be weighted by specifying the `weight' option when
asking permission to execute. It must be a positive integer
and the default value is '1'.

Picking the web server example above, if we were to weight our requests
using their body size, it would become something like this:

<pre lang="erlang" class="erlang">
<![CDATA[ReqBodySize = req_body_size(...),
WorkWeight = 1 + ReqBodySize,
case aequitas:ask(http_requests, IPAddress, [{weight, Weight}]) of
    accepted ->
        Reply = handle_request(...),
        {200, Reply};
    rejected ->
        % too many requests!
        {429, <<>>}
end.]]>
</pre>

=== License ===

MIT License

Copyright (c) 2018 Guilherme Andrade

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

@end
